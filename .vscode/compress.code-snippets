{
  "compress": {
  "prefix": "compress",
  "body": [
    "template <class T> class Compress {",
    "public:",
    "  explicit Compress(const std::vector<T> &argv) {",
    "    isBuilt = false;",
    "    add(argv);",
    "  }",
    "",
    "  Compress() { isBuilt = false; }",
    "",
    "  void add(const std::vector<T> &argv) {",
    "    for (const auto &x : argv) {",
    "      add(x);",
    "    }",
    "  }",
    "  void add(const T x) {",
    "    assert(!this->isBuilt);",
    "    v.emplace_back(x);",
    "  }",
    "",
    "  void build() {",
    "    isBuilt = true;",
    "    std::sort(v.begin(), v.end());",
    "    v.erase(unique(v.begin(), v.end()), v.end());",
    "  }",
    "",
    "  int get(const T x) const {",
    "    assert(this->isBuilt);",
    "    return lower_bound(v.begin(), v.end(), x) - v.begin();",
    "  }",
    "",
    "  const T &operator[](const int k) const { return v[k]; }",
    "",
    "private:",
    "  std::vector<T> v;",
    "  bool isBuilt;",
    "};"
  ],
  "description": "座標圧縮を行います"
}
}
