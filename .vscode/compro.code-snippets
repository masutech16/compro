{
	"template" : {
		"prefix": "temp",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i, n) for (int i = 0; i < n; i++)",
			"#define FOR(i,m,n) for (int i = m; i < n; i++)",
			"#define ALL(v) (v).begin(), (v).end()",
			"#define coutd(n) cout << fixed << setprecision(n)",
			"#define ll long long int",
			"#define vl vector<ll>",
			"#define vi vector<int>",
			"const int INF = 2147483647;",
			"const ll MOD = 1000000007;",
			"",
			"using namespace std;",
			"",
			"int main()",
			"{",
			"\t$1",
			"}",
		]
	},

	"graph": {
		"prefix": "g",
		"body": [
			"struct edge",
			"{",
				"int to, cost;",
			"};",
			"typedef std::vector<std::vector<edge>> graph;",
		]
	},

	"factor": {
  	"prefix": "factor",
  	"body": [
			"// nまでの数が素数かどうかを判定できるvectorを返す",
			"std::vector<bool> factor(const int n) {",
			"  int size = n + 1;",
			"  std::vector<bool> isPrime(size, true);",
			"  isPrime[0] = false;",
			"  isPrime[1] = false;",
			"  for (int i = 2; i < size; i++) {",
			"    if (!isPrime[i])",
			"      continue;",
			"    for (int k = 2; i * k < size; k++) {",
			"      isPrime[i * k] = false;",
			"    }",
			"  }",
			"  return isPrime;",
			"}"
		],
		"description": "factor"
	},

	"fastFactor": {
		"prefix": "fastFactor",
		"body": [
			"// minFactor[i]: iを割り切る最小の素数。存在しない場合は-1。",
			"std::vector<int> fastFactor(const int n) {",
			"  int size = n + 1;",
			"  std::vector<int> minFactor(size, -1);",
			"  for (int i = 2; i < size; i++) {",
			"    if (minFactor[i] != -1)",
			"      continue;",
			"    minFactor[i] = i;",
			"    for (int k = 2; i * k < size; k++) {",
			"      if (minFactor[i * k] == -1) {",
			"        minFactor[i * k] = i;",
			"      }",
			"    }",
			"  }",
			"  return minFactor;",
			"}"
		],
		"description": "fastFactor"
	}
}
