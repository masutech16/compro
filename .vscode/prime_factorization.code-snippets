{
	"prime_table": {
  	"prefix": "primetable",
  	"body": [
			"std::vector<bool> prime_table(const int n) {",
			"  int size = n + 1;",
			"  std::vector<bool> isPrime(size, true);",
			"  isPrime[0] = false;",
			"  isPrime[1] = false;",
			"  for (int i = 2; i < size; i++) {",
			"    if (!isPrime[i])",
			"      continue;",
			"    for (int k = 2; i * k < size; k++) {",
			"      isPrime[i * k] = false;",
			"    }",
			"  }",
			"  return isPrime;",
			"}"
		],
		"description": "nまでの数が素数かどうかを判定できるvectorを返す"
	},

	"prime_int_table": {
		"prefix": "primetable",
		"body": [
			"std::vector<int> prime_int_table(const int n) {",
			"  int size = n + 1;",
			"  std::vector<int> minFactor(size, -1);",
			"  for (int i = 2; i < size; i++) {",
			"    if (minFactor[i] != -1)",
			"      continue;",
			"    minFactor[i] = i;",
			"    for (int k = 2; i * k < size; k++) {",
			"      if (minFactor[i * k] == -1) {",
			"        minFactor[i * k] = i;",
			"      }",
			"    }",
			"  }",
			"  return minFactor;",
			"}"
		],
		"description": "iを割り切る最小の素数が入ったvectorを返す"
	},
	"prime_factorization": {
		"prefix": "factorization",
		"body": [
			"std::vector<int> prime_factorization(int n) {",
			"  std::vector<int> ret;",
			"  for (int d = 2; d * d <= n; d++) {",
			"    while (n % d == 0) {",
			"      ret.push_back(d);",
			"      n /= d;",
			"    }",
			"  }",
			"  if (n != 1)",
			"    ret.push_back(n);",
			"  return ret;",
			"}"
		],
		"description": "nを素因数分解したvectorを返す"
	}
}
